# Langfuse Helm Chart Configuration

# -- Override the name for the selector labels, defaults to the chart name
nameOverride: ""

# -- Override the full name of the deployed resources, defaults to a combination of the release name and the name for the selector labels
fullnameOverride: ""

# -- Core Langfuse Configuration
langfuse:
  # -- Logging configuration
  logging:
    # -- Set the log level for the application (trace, debug, info, warn, error, fatal)
    level: info
    # -- Set the log format for the application (text or json)
    format: text

  # -- Set to true to set CSP headers to only allow HTTPS connections. Needs to be set at build-time.
  cspEnforceHttps: false

  # -- Used to hash API keys. Can be configured by value or existing secret reference. If neither value nor secretKeyRef is provided, no salt will be used.
  salt:
    value: ""
    secretKeyRef:
      name: ""
      key: ""
      
  # -- Langfuse EE license key.
  licenseKey:
    value: ""
    secretKeyRef:
      name: ""
      key: ""

  # -- Used to encrypt sensitive data. Must be 256 bits (64 string characters in hex format). Generate via `openssl rand -hex 32`.
  encryptionKey:
    key:
      value: ""
      secretKeyRef:
        name: ""
        key: ""

  # -- Feature flags
  features:
    # -- Whether or not to report basic usage statistics to a centralized server.
    telemetryEnabled: true
    # -- Disable public sign up
    signUpDisabled: false
    # -- Enable experimental features
    experimentalFeaturesEnabled: false
  
  # -- Node.js environment to use for all langfuse deployments
  nodeEnv: production

  serviceAccount:
    create: true
    annotations: {}
    # -- Override the name of the service account to use, discovered automatically if not set
    name: ""

  ingress:
    enabled: false
    additionalLabels: {}
    annotations: {}
    className: ""
    hosts: []
    # Example:
    # - host: "langfuse.example.com"
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific

    tls:
      enabled: false
      secretName: ""

  # -- Pod annotations for all langfuse deployments
  podAnnotations: {}
  # -- Pod security context for all langfuse deployments
  podSecurityContext: {}
  # -- Security context for all langfuse deployments
  securityContext: {}
  # -- Node selector for all langfuse deployments
  nodeSelector: {}
  # -- Tolerations for all langfuse deployments
  tolerations: []
  # -- Affinity for all langfuse deployments
  affinity: {}


  # -- Number of replicas to use for all langfuse deployments, can be overridden by the individual deployments
  replicas: 1
  # -- Resources for all langfuse deployments, can be overridden by the individual deployments
  resources: {}

  # -- List of additional environment variables to be added to all langfuse deployments. See [documentation](https://langfuse.com/docs/deployment/self-host#configuring-environment-variables) for details.
  additionalEnv: []
  # -- Allows additional containers to be added to all langfuse deployments
  extraContainers: []
  # -- Allows additional volumes to be added to all langfuse deployments
  extraVolumes: []
  # -- Allows additional init containers to be added to all langfuse deployments
  extraInitContainers: []
  # -- Allows additional volume mounts to be added to all langfuse deployments
  extraVolumeMounts: []

  # Web deployment configuration
  web:
    # -- Image to use for the langfuse web application
    image:
      repository: langfuse/langfuse
      tag: 3
      pullPolicy: Always
      pullSecrets: []

    # -- Service configuration for the langfuse web application
    service:
      type: ClusterIP
      port: 3000
      nodePort: null
      additionalLabels: {}
      annotations: {}

    # -- Base path for the liveness/readiness probes. Should not include trailing slash.
    healthcheckBasePath: ""

    # -- Resources for the langfuse web application. Defaults to the global resources
    resources: {}

    # -- Number of replicas to use if HPA is not enabled. Defaults to the global replicas
    replicas: null

    # -- Horizontal Pod Autoscaler configuration
    hpa:
      enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50

    # -- Vertical Pod Autoscaler configuration
    vpa:
      enabled: false
      controlledResources: []
      maxAllowed: {}
      minAllowed: {}
      updatePolicy:
        updateMode: Auto
    
    # -- Adding records to /etc/hosts in the pod's network.
    hostAliases: []

    livenessProbe:
      # -- Initial delay seconds for livenessProbe.
      initialDelaySeconds: 20
      # -- Period seconds for livenessProbe.
      periodSeconds: 10
      # -- Timeout seconds for livenessProbe.
      timeoutSeconds: 5
      # -- Failure threshold for livenessProbe.
      failureThreshold: 3
      # -- Success threshold for livenessProbe.
      successThreshold: 1

    readinessProbe:
      # -- Initial delay seconds for readinessProbe.
      initialDelaySeconds: 20
      # -- Period seconds for readinessProbe.
      periodSeconds: 10
      # -- Timeout seconds for readinessProbe.
      timeoutSeconds: 5
      # -- Failure threshold for readinessProbe.
      failureThreshold: 3
      # -- Success threshold for readinessProbe.
      successThreshold: 1
  
  # Worker deployment configuration
  worker:
    # -- Image to use for the langfuse worker application
    image:
      repository: langfuse/langfuse-worker
      tag: 3
      pullPolicy: Always
      pullSecrets: []

    # -- Service configuration for the langfuse worker application
    service:
      type: ClusterIP
      port: 3030
      nodePort: null
      additionalLabels: {}
      annotations: {}

    # -- Resources for the langfuse worker application. Defaults to the global resources
    resources: {}

    # -- Number of replicas to use if HPA is not enabled. Defaults to the global replicas
    replicas: null

    # -- Horizontal Pod Autoscaler configuration
    hpa:
      enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50

    # -- Vertical Pod Autoscaler configuration
    vpa:
      enabled: false
      controlledResources: []
      maxAllowed: {}
      minAllowed: {}
      updatePolicy:
        updateMode: Auto
    
    livenessProbe:
      # -- Initial delay seconds for livenessProbe.
      initialDelaySeconds: 20
      # -- Period seconds for livenessProbe.
      periodSeconds: 10
      # -- Timeout seconds for livenessProbe.
      timeoutSeconds: 5
      # -- Failure threshold for livenessProbe.
      failureThreshold: 3
      # -- Success threshold for livenessProbe.
      successThreshold: 1


# -- NextAuth configuration
nextauth:
  # -- When deploying to production, set the `nextauth.url` value to the canonical URL of your site.
  url: http://localhost:3000
  # -- Used to encrypt the NextAuth.js JWT, and to hash email verification tokens. Can be configured by value or existing secret reference.
  secret:
    value: ""
    secretKeyRef:
      name: ""
      key: ""

# -- PostgreSQL Configuration
postgresql:
  # -- Deploy subchart or use external database
  deploy: true
  
  # -- If `postgresql.deploy` is set to false, hostname of the external postgres server to use (mandatory)
  host: langfuse-postgresql
  port: 5432

  # -- If `postgresql.deploy` is set to false, Connection string of your Postgres database used for database migrations. Use this if you want to use a different user for migrations or use connection pooling on DATABASE_URL. For large deployments, configure the database user with long timeouts as migrations might need a while to complete.
  directUrl: ""

  # -- If your database user lacks the CREATE DATABASE permission, you must create a shadow database and configure the "SHADOW_DATABASE_URL". This is often the case if you use a Cloud database. Refer to the Prisma docs for detailed instructions.
  shadowDatabaseUrl: ""

  # -- Optional page size for streaming exports to S3 to avoid memory issues. The page size can be adjusted if needed to optimize performance.
  exportPageSize: 1000

  # -- Authentication configuration
  auth:
    # -- Username to use to connect to the postgres database deployed with Langfuse. In case `postgresql.deploy` is set to `true`, the user will be created automatically.
    username: postgres
    # -- Password to use to connect to the postgres database deployed with Langfuse. In case `postgresql.deploy` is set to `true`, the password will be set automatically.
    password: ""
    # -- Database name to use for Langfuse.
    database: postgres_langfuse
    # -- Additional database connection arguments
    args: ""
  
  # -- Migration configuration
  migration:
    # -- Whether to run automatic migrations on startup
    autoMigrate: false

  # Subchart specific settings
  architecture: standalone
  primary:
    service:
      ports:
        postgresql: 5432

# Key-Value Store / Redis Configuration
redis:
  # -- Enable valkey deployment (via Bitnami Helm Chart). If you want to use a Redis or Valkey server already deployed, set to false.
  deploy: true

  # -- Connection settings
  host: langfuse-valkey-primary
  port: 6379
  
  # -- Authentication configuration
  auth:
    # -- Configure the password by value or existing secret reference
    password: ""
    database: 0
  
  # Subchart specific settings
  architecture: standalone
  primary:
    # -- Extra flags for the valkey deployment. Must include `--maxmemory-policy noeviction`.
    extraFlags:
      - "--maxmemory-policy noeviction"

# ClickHouse Configuration
clickhouse:
  # -- Enable ClickHouse deployment (via Bitnami Helm Chart). If you want to use an external Clickhouse server (or a managed one), set this to false
  deploy: true
  
  # -- Connection settings
  host: langfuse-clickhouse
  httpPort: 8123
  nativePort: 9000
  
  # -- Authentication configuration
  auth:
    # -- Username for the ClickHouse user.
    username: default
    # -- Password for the ClickHouse user.
    password: ""
  
  # -- Migration configuration
  migration:
    # -- Migration URL (TCP protocol) for clickhouse
    url: ""
    # -- Set to true to establish SSL connection for migration
    ssl: false
    # -- Whether to run automatic ClickHouse migrations on startup
    autoMigrate: true

  # -- Whether to run ClickHouse commands ON CLUSTER
  clusterEnabled: true
  
  # -- Database name to use
  database: default

  # -- Subchart specific settings
  shards: 1 # Fixed - Langfuse does not support sharding
  # -- Number of replicas to use for the ClickHouse cluster. 1 corresponds to a single, non-HA deployment.
  replicaCount: 3
  resourcesPreset: 2xlarge

# S3/MinIO Configuration
s3:
  # -- Enable MinIO deployment (via Bitnami Helm Chart). If you want to use a custom BlobStorage, e.g. S3, set to false.
  deploy: true

  # -- S3 bucket to use for all uploads. Can be overridden per upload type.
  bucket: ""
  # -- Prefix to use for all uploads within the bucket. Can be overridden per upload type.
  prefix: ""
  # -- S3 region to use for all uploads. Can be overridden per upload type.
  region: "auto"
  # -- S3 endpoint to use for all uploads. Can be overridden per upload type.
  endpoint: ""
  # -- Whether to force path style on requests. Required for MinIO. Can be overridden per upload type.
  forcePathStyle: true
  # -- S3 accessKeyId to use for all uploads. Can be overridden per upload type.
  accessKeyId:
    value: ""
    secretKeyRef:
      name: ""
      key: ""
  # -- S3 secretAccessKey to use for all uploads. Can be overridden per upload type.
  secretAccessKey:
    value: ""
    secretKeyRef:
      name: ""
      key: ""

  # Event Upload Configuration
  eventUpload:
    # -- S3 bucket to use for event uploads.
    bucket: ""
    # -- Prefix to use for event uploads within the bucket.
    prefix: ""
    # -- S3 region to use for event uploads.
    region: "auto"
    # -- S3 endpoint to use for event uploads.
    endpoint: ""
    # -- Whether to force path style on requests. Required for MinIO.
    forcePathStyle: true
    # -- S3 accessKeyId to use for event uploads.
    accessKeyId:
      value: ""
      secretKeyRef:
        name: ""
        key: ""
    # -- S3 secretAccessKey to use for event uploads.
    secretAccessKey:
      value: ""
      secretKeyRef:
        name: ""
        key: ""

  # Batch Export Configuration
  batchExport:
    # -- Enable batch export.
    enabled: false
    # -- S3 bucket to use for batch exports.
    bucket: ""
    # -- Prefix to use for batch exports within the bucket.
    prefix: ""
    # -- S3 region to use for batch exports.
    region: ""
    # -- S3 endpoint to use for batch exports.
    endpoint: ""
    # -- Whether to force path style on requests. Required for MinIO.
    forcePathStyle: true
    # -- S3 accessKeyId to use for batch exports.
    accessKeyId:
      value: ""
      secretKeyRef:
        name: ""
        key: ""
    # -- S3 secretAccessKey to use for batch exports.
    secretAccessKey:
      value: ""
      secretKeyRef:
        name: ""
        key: ""

  # Media Upload Configuration
  mediaUpload:
    # -- S3 bucket to use for media uploads.
    bucket: ""
    # -- Prefix to use for media uploads within the bucket.
    prefix: ""
    # -- S3 region to use for media uploads.
    region: ""
    # -- S3 endpoint to use for media uploads.
    endpoint: ""
    # -- Whether to force path style on requests. Required for MinIO.
    forcePathStyle: true
    # -- S3 accessKeyId to use for media uploads.
    accessKeyId:
      value: ""
      secretKeyRef:
        name: ""
        key: ""
    # -- S3 secretAccessKey to use for media uploads.
    secretAccessKey:
      value: ""
      secretKeyRef:
        name: ""
        key: ""
    # -- Maximum content length for media uploads. Defaults to 1GB.
    maxContentLength: 1000000000
    # -- Expiry time for download URLs. Defaults to 1 hour.
    downloadUrlExpirySeconds: 3600

  # MinIO subchart specific settings
  defaultBuckets: langfuse
  auth:
    rootUser: ""
    rootPassword: ""

# Additional manifests
extraManifests: []